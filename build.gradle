buildscript {
    repositories { jcenter() }
    dependencies {
        // Gradle linter
        classpath 'com.netflix.nebula:gradle-lint-plugin:latest.release'
    }
}

plugins {
    id 'java'

    // IDE plugins
    id 'eclipse'
    id 'idea'

    // JaCoCo plugin to measure KGP's coverage but not to calculate fault localization metric
    id 'jacoco'

    // Maven plugin to use JitPack
    id 'maven'

    // Gradle lint
    id "nebula.lint" version "16.9.0"
}

// Set compiler version
//sourceCompatibility = '1.11'
//targetCompatibility = '1.11'

// Set default encoding
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

// Configure gradle linter
gradleLint.rules = ['all-dependency'] // include all rules
gradleLint.alwaysRun = false

// Set group to use JitPack
group = 'com.github.kusumotolab'

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    maven { url 'https://repo.gradle.org/gradle/libs-snapshots' }
}

// In this section you declare the dependencies for your production and test code
dependencies {

    // Use custom junit jar to terminate timed out process during apr loop
    implementation files('src/main/resources/junit4/junit-4.12-kgp-custom.jar')

    implementation 'args4j:args4j:2.33'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'com.github.albfernandez:juniversalchardet:2.3.2'
    implementation 'com.github.wumpz:diffutils:2.2'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.google.guava:guava:26.0-jre'
    implementation 'commons-codec:commons-codec:1.11'
    implementation 'io.gsonfire:gson-fire:1.8.5'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.4'
    implementation 'org.apache.commons:commons-lang3:3.7'
    implementation 'org.codehaus.plexus:plexus-utils:3.1.0'
    implementation 'org.eclipse.jdt:org.eclipse.jdt.core:3.13.102'
    implementation 'org.eclipse.platform:org.eclipse.equinox.common:3.10.200'
    implementation 'org.eclipse.platform:org.eclipse.text:3.8.0'
    implementation 'org.jacoco:org.jacoco.core:0.8.1'
    implementation 'org.slf4j:slf4j-api:1.7.25'

    testImplementation 'org.assertj:assertj-core:3.18.1'
    testImplementation 'org.mockito:mockito-core:2.+'
    testImplementation 'com.google.jimfs:jimfs:1.1'
    testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'
    testImplementation 'net.javacrumbs.json-unit:json-unit-assertj:2.25.0'

    // to construct maven project
    implementation 'org.apache.maven:maven-embedder:3.6.3'
    runtimeOnly 'org.apache.maven:maven-compat:3.6.3'
    runtimeOnly 'org.apache.maven.resolver:maven-resolver-transport-wagon:1.6.1'
    runtimeOnly 'org.apache.maven.resolver:maven-resolver-transport-http:1.6.1'
    runtimeOnly 'org.eclipse.aether:aether-connector-basic:1.1.0'
    runtimeOnly 'org.eclipse.aether:aether-transport-wagon:1.1.0'

    // to construct gradle project
    implementation group: 'org.gradle', name: 'gradle-tooling-api', version: '6.7.1'

    // Declare by "runtimeOnly" cuz hamcrest is necessary to execute junit-test dynamically,
    // but it doesn't seem to be loaded on compile task.
    runtimeOnly 'org.hamcrest:hamcrest-core:1.3'

    // night-config:core is necessary to compile, and "toml" is necessary for runtime only.
    implementation 'com.electronwill.night-config:core:3.4.0'
    runtimeOnly 'com.electronwill.night-config:toml:3.4.0'
}

jar {
    // Specify App's entry point
    manifest {
        attributes "Main-Class": "jp.kusumotolab.kgenprog.CUILauncher"
    }

    // fatjar must include all dependencies
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    // exclude jar signatures for jar compression to avoid invalid signature
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'

    doFirst {
        // copy gradle.properties to resolve version info
        copy {
            from 'gradle.properties'
            into buildDir.name + '/resources/main/'
        }

        // annotate whether this task was executed on CI or not
        def isCi = System.getenv('CI') ? 'true' : 'false'
        File prop = new File(buildDir.name + '/resources/main/gradle.properties')
        prop.append('ci = ' + isCi + '\n')
    }
}

// Define App's version
version = currentVersion

task printCurrentVersion {
    description 'Prints the current kGenProg version.'
    doLast {
        println version
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled false
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/*junit**')
        }))
    }
}
